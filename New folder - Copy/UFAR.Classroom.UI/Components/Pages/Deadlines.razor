@page "/Deadlines"
@using Microsoft.EntityFrameworkCore
@using UFAR.Classroom.Entities
@using UFAR.Classroom   
@inject HttpClient Http
@inject ApplicationDbContext context
@inject IJSRuntime JS
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Deadlines </PageTitle>

<div class="background-container">
    <h1 class="text-center page-title">Deadlines </h1>

    <div class="container mt-5">
        <div class="d-flex justify-content-between mb-4">
            <button class="btn btn-primary btn-sm" @onclick="ToggleAddForm">Add New Deadline</button>
            <button class="btn btn-danger btn-sm" @onclick="ToggleDeleteForm">Delete Deadline</button>
            <button class="btn btn-secondary btn-sm" @onclick="ToggleCalendarView">Calendar View</button>
        </div>

        @if (showAddForm)
        {
            <div class="card shadow-sm mb-4 add-deadline-form">
                <!-- Apply the animation class here -->
                <div class="card-body">
                    <h4>Add New Deadline</h4>
                    <form>
                        <div class="mb-3">
                            <label for="titleInput" class="form-label">Title:</label>
                            <input type="text" id="titleInput" class="form-control" @bind="newDeadline.Title" placeholder="Enter deadline title" />
                        </div>
                        <div class="mb-3">
                            <label for="dueDateInput" class="form-label">Due Date:</label>
                            <input type="date" id="dueDateInput" class="form-control" @bind="newDeadline.DueDate" />
                        </div>


                        <button type="button" class="btn btn-primary btn-sm" @onclick="AddDeadline">Add Deadline</button>
                    </form>
                </div>
            </div>
        }


        @if (showDeleteForm)
        {
            <div class="card shadow-sm mb-4 delete-deadline-form">
                <!-- Apply the animation class here -->
                <div class="card-body">
                    <h4>Delete Deadline</h4>
                    <form>
                        <div class="mb-3">
                            <label for="deadlineIdInput" class="form-label">Deadline ID:</label>
                            <input type="number" id="deadlineIdInput" class="form-control" @bind="deadlineId" placeholder="Enter deadline ID to delete" />
                        </div>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="DeleteDeadline">Delete Deadline</button>
                    </form>
                </div>
            </div>
        }


        @if (showCalendarView)
        {
            <div class="calendar border rounded shadow p-4 calendar-view">
                <!-- Apply the animation class here -->
                <h4 class="text-center mb-4">Deadlines for @DateTime.Now.ToString("MMMM yyyy")</h4>
                <table class="table table-bordered table-calendar">
                    <thead class="thead-light">
                        <tr>
                            <th>Sun</th>
                            <th>Mon</th>
                            <th>Tue</th>
                            <th>Wed</th>
                            <th>Thu</th>
                            <th>Fri</th>
                            <th>Sat</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var week in GetCalendarRows(DateTime.Now.Year, DateTime.Now.Month))
                        {
                            <tr>
                                @foreach (var day in week)
                                {
                                    <td class="@GetDayClass(day)">
                                        <div class="calendar-day">
                                            @if (day != DateTime.MinValue)
                                            {
                                                <span class="day-number">@day.Day</span>

                                                @foreach (var deadline in deadlines.Where(d => d.DueDate.Date == day.Date))
                                                {
                                                    <div class="deadline-item mt-1" data-bs-toggle="tooltip" title="@deadline.Title">
                                                        <span class="badge bg-danger">
                                                            <i class="fas fa-exclamation-circle"></i> @deadline.Title
                                                        </span>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        else
        {
            <div class="card shadow-sm mt-4">
                <div class="card-body">
                    <h4>Deadlines List</h4>
                    @if (deadlines == null)
                    {
                        <p><em>"I'm using Azure SQL through the Student Pack, and the database may go offline when not in use. It could take up to 2 minutes for the data to appear as the service is restarting."</em></p>
                    }
                    else
                    {
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>DueDate</th>
                                    <th>UserId</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var d in deadlines)
                                {
                                    <tr>
                                        <td>@d.Id</td>
                                        <td>@d.Title</td>
                                        <td>@d.DueDate.ToString("yyyy-MM-dd")</td>
 
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        }
    </div>
</div>




@code {
    private List<Deadline>? deadlines { get; set; }
    private Deadline newDeadline = new Deadline();
    private int deadlineId;
    private bool showAddForm = false;
    private bool showDeleteForm = false;
    private bool showCalendarView = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDeadlines();
    }

    private async Task LoadDeadlines()
    {
        try
        {
            deadlines = await Http.GetFromJsonAsync<List<Deadline>>("https://localhost:7150/api/deadlines");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading deadlines: {ex.Message}";
        }
    }

    private async Task AddDeadline()
    {
        if (string.IsNullOrWhiteSpace(newDeadline.Title) || newDeadline.DueDate == default )
        {
            errorMessage = "Please fill in all fields.";
            return;
        }

        var response = await Http.PostAsJsonAsync("https://localhost:7150/api/deadlines", newDeadline);

        if (response.IsSuccessStatusCode)
        {
            newDeadline = new Deadline(); // Reset the form after adding
            await LoadDeadlines(); // Refresh the list
            showAddForm = false; // Hide the form after adding
            errorMessage = string.Empty; // Clear error message
        }
        else
        {
            errorMessage = "Error adding deadline.";
        }
    }

    private async Task DeleteDeadline()
    {
        if (deadlineId == 0)
        {
            errorMessage = "Please enter a valid deadline ID.";
            return;
        }

        var response = await Http.DeleteAsync($"https://localhost:7150/api/deadlines/{deadlineId}");

        if (response.IsSuccessStatusCode)
        {
            deadlineId = 0; // Reset the form after deleting
            await LoadDeadlines(); // Refresh the list
            showDeleteForm = false; // Hide the form after deleting
            errorMessage = string.Empty; // Clear error message
        }
        else
        {
            errorMessage = "Error deleting deadline.";
        }
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        showDeleteForm = false; // Hide delete form if add form is shown
        errorMessage = string.Empty; // Clear error message
    }

    private void ToggleDeleteForm()
    {
        showDeleteForm = !showDeleteForm;
        showAddForm = false; // Hide add form if delete form is shown
        errorMessage = string.Empty; // Clear error message
    }

    private void ToggleCalendarView()
    {
        showCalendarView = !showCalendarView;
    }

    private List<List<DateTime>> GetCalendarRows(int year, int month)
    {
        var firstDay = new DateTime(year, month, 1);
        var daysInMonth = DateTime.DaysInMonth(year, month);
        var calendar = new List<List<DateTime>>();
        var week = new List<DateTime>();

        for (int i = 0; i < (int)firstDay.DayOfWeek; i++) // Add empty days before first day
        {
            week.Add(DateTime.MinValue); // Placeholder for empty cells
        }

        for (int day = 1; day <= daysInMonth; day++)
        {
            var currentDay = new DateTime(year, month, day);
            week.Add(currentDay);

            if (week.Count == 7) // End of the week
            {
                calendar.Add(week);
                week = new List<DateTime>();
            }
        }

        // Fill in the rest of the week with empty days
        while (week.Count < 7)
        {
            week.Add(DateTime.MinValue);
        }
        calendar.Add(week);

        return calendar;
    }

    private string GetDayClass(DateTime day)
    {
        if (day == DateTime.MinValue)
            return "empty-day";
        if (day == DateTime.Now.Date)
            return "today";
        return "normal-day";
    }

    private async Task CheckForUpcomingDeadlines()
    {
        foreach (var deadline in deadlines)
        {
            if (deadline.DueDate.Date == DateTime.Now.AddDays(1).Date)
            {
                await JS.InvokeVoidAsync("showNotification", deadline);
            }
        }
    }
}



<style>
    .background-container {
        background-image: url('/images/background.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        min-height: 100vh;
    }

    .page-title {
        font-size: 3rem;
        color: darkgrey margin-bottom: 20px;
    }

    .container {
        max-width: 900px;
        margin: auto;
    }

    .card {
        border-radius: 10px;
    }

    .card-body {
        padding: 20px;
    }

    .calendar {
        background-color: #f8f9fa;
    }

    .table-calendar th, .table-calendar td {
        text-align: center;
        vertical-align: middle;
    }

    .calendar-day {
        position: relative;
        padding: 10px;
    }

    .day-number {
        font-weight: bold;
        font-size: 1.2rem;
    }

    .deadline-item {
        margin-top: 5px;
    }

    .empty-day {
        background-color: #e9ecef;
    }

    .today {
        background-color: background-color: #d1ecf1;
    }

    .normal-day {
        background-color: #ffffff;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .btn {
        margin-right: 5px;
    }

        .btn:last-child {
            margin-right: 0;
        }

    .form-label {
        font-weight: bold;
    }

    .form-control {
        border-radius: 5px;
    }

    .badge {
        font-size: 0.9rem;
    }

    .calendar-day {
        min-height: 100px;
    }

        .calendar-day .day-number {
            display: block;
            margin-bottom: 5px;
        }

        .calendar-day .deadline-item {
            font-size: 0.8rem;
        }

            .calendar-day .deadline-item .badge {
                display: block;
                width: 100%;
            }

                .calendar-day .deadline-item .badge i {
                    margin-right: 5px;
                }
</style>